#!/bin/bash

show_usage()
{
	echo "Usage:  -d build with debug option"
	echo "        -u build as unit test app"
	echo "        -s build static library"
	echo "        -c remove all build file"
	echo ""
	exit -1
}

show_message()
{
    echo "[-------------"$1"-----------------]"
}

DIR_ROOT=`pwd`
BUILD_TYPE="release"
UNIT_TEST="false"
PROJECT_CLEAN= "false"
LIB_TYPE="shared"

if [ -n "$1" ];then
if [ x"${1:0:1}" != "x-" ];then
  show_usage
fi
fi

while getopts 'cdsuj:' OPT; do
	case $OPT in
	c)
		PROJECT_CLEAN="true";;
	d)
		BUILD_TYPE="debug";;
	s)
		LIB_TYPE="static";;
	u)
		UNIT_TEST="true";;
    j)
		JOBS=$OPTARG;;
	?)
		show_usage
	esac
done
shift $(($OPTIND - 1))


#清理环境
if [ x"${PROJECT_CLEAN}" == x"true" ];then
	rm -rf ${DIR_ROOT}/tmp/ 2>&1 > /dev/null
	rm -rf ${DIR_ROOT}/out/ 2>&1 > /dev/null
	show_message "clean done"
	echo ""
	exit 0
fi

#环境准备
rm -rf ${DIR_ROOT}/out/* > /dev/null 2>&1
mkdir -pv ${DIR_ROOT}/out/ > /dev/null 2>&1
mkdir -pv ${DIR_ROOT}/tmp/ > /dev/null 2>&1

#编译
if [ x"${JOBS}" == x"" ];then
    JOBS=`grep -c ^processor /proc/cpuinfo`
fi

if [ -z ${JOBS} ];then
    JOBS=1
fi

cd ${DIR_ROOT}/tmp
if [ -d ${DIR_ROOT}/src ];then
  cmake -DBUILD_TYPE=${BUILD_TYPE} -DUNIT_TEST=${UNIT_TEST} -DLIB_TYPE=${LIB_TYPE} ${DIR_ROOT} && make -j${JOBS}
  if [ $? != 0 ]; then
    show_message "failed to make project"
    exit -1
  fi
fi

show_message "succeed"
