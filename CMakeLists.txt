#CMAKE最小版本要求,可修改
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(${MODULE_NAME})

ADD_DEFINITIONS(-DMODULE_IS_LIB)
ADD_DEFINITIONS(-DLIB_HEADER_EXPORT)
ADD_DEFINITIONS(-DHOST_TYPE="${HOST_TYPE}")
ADD_DEFINITIONS(-DMODULE_VER="${MODULE_VER}")
ADD_DEFINITIONS(-DMODULE_NAME="${MODULE_NAME}")
ADD_DEFINITIONS(-DMODULE_NAME_X=${MODULE_NAME})
ADD_DEFINITIONS(-DMODULE_DEPEND="${MODULE_DEPEND}")

IF (${UNIT_TEST} STREQUAL "true")
	ADD_DEFINITIONS(-DUNIT_TEST)
ENDIF()

IF ("${HOST_TYPE}" STREQUAL "linux_x64")
ADD_DEFINITIONS(-DHOST_LINUX_X64)
SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR x86)
ELSEIF("${HOST_TYPE}" STREQUAL "rpi")
ADD_DEFINITIONS(-DHOST_RPI)
SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR arm)
ELSEIF("${HOST_TYPE}" STREQUAL "android-arm64")
ADD_DEFINITIONS(-DHOST_ANDROID_ARM64)
SET(CMAKE_SYSTEM_NAME Android)
SET(CMAKE_SYSTEM_PROCESSOR arm64)
ELSEIF("${HOST_TYPE}" STREQUAL "android-arm")
ADD_DEFINITIONS(-DHOST_ANDROID_ARM)
SET(CMAKE_SYSTEM_NAME Android)
SET(CMAKE_SYSTEM_PROCESSOR arm)
ELSEIF("${HOST_TYPE}" STREQUAL "win32")
ADD_DEFINITIONS(-DHOST_WIN32)
SET(CMAKE_SYSTEM_NAME Windows)
SET(CMAKE_SYSTEM_PROCESSOR x86)
ENDIF()

IF ("${BUILD_TYPE}" STREQUAL "debug")
ADD_DEFINITIONS(-D__DEBUG__)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
ELSE()
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s -O2")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s -O2")
ENDIF()

#-Woverloaded-virtual
#C/C++文件编译选项,无需修改
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MODULE_DEFINE} -fPIC -rdynamic -Wl,--disable-new-dtags -Wall -Werror -Wno-stringop-truncation -Wno-sign-compare -Wno-error=deprecated-declarations -Wdeprecated -Wunreachable-code -std=gnu99 -Wstrict-prototypes -fwrapv -Wno-unused-result -Wno-unused-parameter -Wno-unused-but-set-parameter")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MODULE_DEFINE} -fPIC -rdynamic -Wl,--disable-new-dtags -Wall -Werror -Wno-stringop-truncation -Wno-sign-compare -Wno-error=deprecated-declarations -Wdeprecated -Wunreachable-code -std=c++11 -fwrapv -Wno-unused-result -Wno-unused-parameter -Wno-unused-but-set-parameter")

SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
SET(CMAKE_INSTALL_RPATH "$ORIGIN:$ORIGIN/lib:./:./out/${HOST_TYPE}:./tmp/${HOST_TYPE}/depend:../../tmp/${HOST_TYPE}/depend")

#头文件搜索路径,可修改
INCLUDE_DIRECTORIES(
	${PROJECT_SOURCE_DIR}/tmp/${HOST_TYPE}/depend
	${PROJECT_SOURCE_DIR}/src/export
	${PROJECT_SOURCE_DIR}/src
)

#库文件搜索路径,可修改
LINK_DIRECTORIES(
	${PROJECT_SOURCE_DIR}
	${PROJECT_SOURCE_DIR}/tmp/${HOST_TYPE}/depend
)

#依赖库,无需修改
SET(PROJECT_LIB
	${PROJECT_LIB}
	m
)

IF ("${HOST_TYPE}" MATCHES "android*")
SET(PROJECT_LIB
	${PROJECT_LIB}
	c++_shared
	dl
)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-missing-braces -Wno-unused-function")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-braces -Wno-unused-function")
ELSE()
SET(PROJECT_LIB
	${PROJECT_LIB}
	pthread
	dl
)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
ENDIF()

#src文件夹下的所有源文件,无需修改
#非递归方式，不允许存在子文件夹
AUX_SOURCE_DIRECTORY(src PROJECT_SRC)
IF (${UNIT_TEST} STREQUAL "true")
AUX_SOURCE_DIRECTORY(src/test PROJECT_SRC)
ENDIF()
#递归方式(允许存在子文件夹)
#FILE(GLOB_RECURSE PROJECT_SRC ${PROJECT_SOURCE_DIR}/src/*.cpp ${PROJECT_SOURCE_DIR}/src/*.c)

#无需改动
IF (${UNIT_TEST} STREQUAL "true")
	SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/out/${HOST_TYPE})
	ADD_EXECUTABLE(${PROJECT_NAME} ${PUBLIC_SRC} ${PROJECT_SRC})
ELSE()
	SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/out/${HOST_TYPE})
	IF (${LIB_TYPE} STREQUAL "static")
	    ADD_DEFINITIONS(-DLIB_TYPE_STATIC)
	    ADD_LIBRARY(${PROJECT_NAME} STATIC ${PUBLIC_SRC} ${PROJECT_SRC})
	ELSE()
	    ADD_DEFINITIONS(-DLIB_TYPE_SHARED)
	    ADD_LIBRARY(${PROJECT_NAME} SHARED ${PUBLIC_SRC} ${PROJECT_SRC})
	ENDIF()
ENDIF()
STRING(STRIP "${PROJECT_LIB}" PROJECT_LIB)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_LIB})